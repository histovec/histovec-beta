import Boom from '@hapi/boom'

import { appLogger, syslogLogger } from '../../../util/logger.js'
import { decryptJson, base64Encode } from '../../../util/crypto.js'
import { buildReportId, buildReportKey, buildIdAndKey } from '../util/report.js'
import { normalizeReport, normalizeControlesTechniques } from '../util/normalizeData.js'
import { vehiculeMapping, controlesTechniquesMapping } from '../util/mapping.js'
import { processControlesTechniques } from '../../../util/controlesTechniques.js'
import { checkPayload } from '../util/check/reportByData.js'
import { getReport } from '../handlers/report.js'
import { reportResponseSchema } from '../../schemas/report.js'

import { NUMERO_IMMATRICULATION_SIV_REGEX } from '../../../constant/regex.js'
import { TYPE_IMMATRICULATION, TYPE_PERSONNE } from '../../../constant/type.js'

import config from '../../../config.js'
import { anonymizeIdentite } from '../../../util/anonymiserData.js'

const DEFAULT_UUID = config.isPublicApi ? config.apiUuid : ''

export const generateReportRoute = ({ path, logLabel, payloadSchema }) => {
  return {
    method: 'POST',
    path,
    options: {
      tags: ['api'],
      validate: {
        payload: payloadSchema,
      },
      response: {
        schema: reportResponseSchema,
      },
    },
    handler: async (request, h) => {
      const {
        uuid = DEFAULT_UUID,
        vehicule: {
          // report by code payload
          code,

          // report by data payload
          certificat_immatriculation: {
            titulaire: {
              particulier: {
                nom,
                prenoms,
              } = {},
              personne_morale: {
                raison_sociale: raisonSociale,
                siren,
              } = {},
            } = {},
            numero_immatriculation: numeroImmatriculation,
            date_emission_certificat_immatriculation: dateEmissionCertificatImmatriculation,
            numero_formule: numeroFormule,
          } = {},
        },
        options: {
          controles_techniques: askControlesTechniques,
          ignore_utac_cache: ignoreUtacCache,
        } = {},
      } = request.payload

      const { id, key, isInvalidCode } = buildIdAndKey(code)

      if (isInvalidCode) {
        throw Boom.badRequest('Malformed HistoVec code')
      }

      const alreadyHasIdAndKey = Boolean(id) && Boolean(key)
      const typeImmatriculation = NUMERO_IMMATRICULATION_SIV_REGEX.test(numeroImmatriculation) ? TYPE_IMMATRICULATION.SIV : TYPE_IMMATRICULATION.FNI

      syslogLogger.debug({ key: 'payload_data', tag: logLabel, value: (anonymizeIdentite({ id, key, logLabel, alreadyHasIdAndKey, uuid, typeImmatriculation, nom, prenoms, raisonSociale, siren, numeroImmatriculation, numeroFormule, dateEmissionCertificatImmatriculation })) })
      // If id param is present, it has been generated by frontend :
      // => it already has been Base64Encoded as needed
      let base64EncodedReportId = id

      // If key param is present, it has been generated by frontend :
      // => it already has been Base64Encoded as needed
      let base64EncodedReportKeyBuffer = key && Buffer.from(key, 'base64')

      if (!alreadyHasIdAndKey) {
        // As far as I know, Joi don't permit to validate as needed in this custom function
        checkPayload({ nom, prenoms, raisonSociale, siren, numeroImmatriculation, numeroFormule, dateEmissionCertificatImmatriculation })

        const typePersonne = nom ? TYPE_PERSONNE.PARTICULIER : TYPE_PERSONNE.PRO
        const reportIdBuffer = buildReportId(
          { nom, prenoms, raisonSociale, siren, numeroImmatriculation, numeroFormule, dateEmissionCertificatImmatriculation },
          { typeImmatriculation, typePersonne },
        )
        base64EncodedReportId = base64Encode(reportIdBuffer)

        base64EncodedReportKeyBuffer = buildReportKey(
          { numeroImmatriculation, numeroFormule, dateEmissionCertificatImmatriculation },
          { typeImmatriculation },
        )
      }

      const res = await getReport({
        uuid,
        id: base64EncodedReportId,
        options: {
          ignoreControlesTechniques: !askControlesTechniques,
          ignoreUtacCache,
        },
      })

      const { sivData, utacData: rawAnonymizedControlesTechniques } = res

      const report = decryptJson(sivData, base64EncodedReportKeyBuffer)
      const normalizedReport = normalizeReport(report)
      syslogLogger.debug({ key: 'SIV_decrypted', tag: logLabel, value: { ...normalizedReport } })

      appLogger.info('[SIV_decrypted] ')

      const mappedVehicule = vehiculeMapping(normalizedReport, config.isPublicApi)
      syslogLogger.debug({ key: 'SIV_decrypted_and_mapped', tag: logLabel, value: { ...mappedVehicule } })

      if (!askControlesTechniques) {
        const reportWithoutControlesTechniques = {
          vehicule: mappedVehicule,
        }
        syslogLogger.info({ key: 'report_without_controles_techniques', tag: logLabel, value: { ...reportWithoutControlesTechniques } })

        return reportWithoutControlesTechniques
      }

      const normalizedControlesTechniques = normalizeControlesTechniques(rawAnonymizedControlesTechniques)
      syslogLogger.debug({ key: 'normalized_controles_techniques', tag: logLabel, value: { ...normalizedControlesTechniques } })

      const labeledControlesTechniques = processControlesTechniques(normalizedControlesTechniques)
      syslogLogger.debug({ key: 'labeled_controles_techniques', tag: logLabel, value: { ...labeledControlesTechniques } })

      const mappedControlesTechniques = controlesTechniquesMapping(labeledControlesTechniques)
      syslogLogger.debug({ key: 'mapped_controles_techniques', tag: logLabel, value: { ...mappedControlesTechniques } })

      const reportWithControlesTechniques = {
        vehicule: mappedVehicule,
        controles_techniques: mappedControlesTechniques,
      }
      syslogLogger.info({ key: 'report_with_controles_techniques', tag: logLabel, value: { ...reportWithControlesTechniques } })

      return reportWithControlesTechniques
    },
  }
}

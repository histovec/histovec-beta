upstream elasticsearch {
  server <ES_HOST>:<ES_PORT>;
}

upstream backend {
  server <BACKEND_HOST>:<BACKEND_PORT>;
}

server {
  listen 80 default_server;
  set_real_ip_from 0.0.0.0/0;
  real_ip_header X-Real-IP;
  real_ip_recursive on;

  location / {
    try_files $uri @rew;
  }

  location /google6d56c7b24593249c.html {
    expires 24h;
     return 200 "google-site-verification: google6d56c7b24593249c.html";
  }

  location /robots.txt {
    expires 24h;
    return 200 "User-agent: *\nDisallow: /<APP>/api/\nAllow: /";
  }

  location @rew {
    expires 24h;
    if ($http_x_forwarded_proto) {
      return 302 $http_x_forwarded_proto://$http_host/<APP>/;
    }
    return 302 $scheme://$http_host/<APP>/;
  }

  location /<APP> {
    expires 24h;
    limit_req zone=app burst=30 nodelay;
    limit_req_status 429;
    alias /usr/share/nginx/html/;
    try_files $uri $uri/ @rewrites;
  }

  location @rewrites {
    rewrite ^(.+)$ /<APP>/index.html last;
  }

  location /<APP>/assets {
    expires 24h;
    limit_req zone=css burst=80 nodelay;
    limit_req_status 429;
    alias /usr/share/nginx/html/assets;
  }

  location ~ "^/<APP>/api/v1/id/[a-f0-9-]{36}/([A-Za-z0-9_-]{43}=)$" {
    include tor-ip.conf;
    include aws-ip.conf;
    if ($request_method != GET) {
       return 405;
    }
    add_header Access-Control-Allow-Origin '$http_origin';
    limit_req zone=api burst=<API_USER_BURST>;
    limit_req zone=server burst=<API_GLOBAL_BURST>;
    limit_req_status 429;
    rewrite "^/.*/id/[a-f0-9-]{36}/([A-Za-z0-9_-]{43}=)$" /<ES_INDEX>/_search?q="$1"&size=1&terminate_after=1&filter_path=hits.hits._source.v break;
    proxy_pass http://elasticsearch;
    proxy_redirect off;
    proxy_hide_header Content-Type;
    proxy_set_body '{"_source": "v"}';
    proxy_set_header content-type "application/json";
    proxy_method POST;
    proxy_buffering off;
    proxy_http_version 1.1;
  }

  location ~ ^/<APP>/api/v1/id/.* {
    return 400;
  }

  location ~ "^/<APP>/api/v1/log/exit" {
    if ($request_method != POST) {
       return 405;
    }
    limit_req zone=log burst=80 nodelay;
    limit_req_status 429;
    default_type application/json;
    return 200 '{"status":"ok"}';
  }

  location ~ "^/<APP>/api/v1/log/.*" {
    if ($request_method != PUT) {
       return 405;
    }
    limit_req zone=log burst=80 nodelay;
    limit_req_status 429;
    default_type application/json;
    return 200 '{"status":"ok"}';
  }

  location ~ (^/<APP>/api/v1/feedback/) {
    include tor-ip.conf;
    include aws-ip.conf;
    if ($request_method != POST) {
       return 405;
    }

    limit_req zone=api burst=<API_USER_BURST>;
    limit_req zone=write burst=<API_WRITE_BURST>;
    limit_req_status 429;

    rewrite "^/.*/(feedback)/$" /$1/_doc break;
    proxy_pass http://elasticsearch;
    proxy_redirect off;
    proxy_hide_header Content-Type;
    proxy_set_header content-type "application/json";
    proxy_buffering off;
    proxy_http_version 1.1;
  }

  location ~ "^/<APP>/api/v1/(siv|utac)" {
    include tor-ip.conf;
    include aws-ip.conf;
    if ($request_method != POST) {
       return 405;
    }
    limit_req zone=api burst=<API_USER_BURST>;
    limit_req zone=server burst=<API_GLOBAL_BURST>;
    limit_req_status 429;

    proxy_pass http://backend;
    proxy_http_version 1.1;
    proxy_next_upstream off;
    proxy_set_header  X-Forwarded-For $http_x_forwarded_for;
    proxy_set_header  X-Forwarded-Host $http_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
  }

  location ~ "^/<APP>/api/v1/(contact|feedback)" {
    if ($request_method != POST) {
       return 405;
    }

    limit_req zone=api burst=<API_USER_BURST>;
    limit_req zone=write burst=<API_WRITE_BURST>;
    limit_req_status 429;

    proxy_pass http://backend;
    proxy_http_version 1.1;
    proxy_next_upstream off;
    proxy_set_header  X-Forwarded-For $remote_addr;
    proxy_set_header  X-Forwarded-Host $remote_addr;
    proxy_set_header Host $http_host;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
  }


}
